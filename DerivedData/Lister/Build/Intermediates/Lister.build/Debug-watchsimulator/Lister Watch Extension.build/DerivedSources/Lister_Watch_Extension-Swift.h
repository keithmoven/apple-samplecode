// Generated by Apple Swift version 2.0 (swiftlang-700.0.38.1 clang-700.0.53)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import WatchConnectivity;
@import WatchKit;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIColor;
@class WKInterfaceGroup;
@class WKInterfaceLabel;


/// A lightweight controller object that is responsible for displaying the content in a group within the ``ListsInterfaceController`` controller's ``WKInterfaceTable`` property.
SWIFT_CLASS("_TtC22Lister_Watch_Extension24ColoredTextRowController")
@interface ColoredTextRowController : NSObject
@property (nonatomic, weak) IBOutlet WKInterfaceGroup * __null_unspecified listColorGroup;
@property (nonatomic, weak) IBOutlet WKInterfaceLabel * __null_unspecified textLabel;
- (void)setText:(NSString * __nonnull)text;
- (void)setColor:(UIColor * __nonnull)color;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ListInfo;
@class WCSession;
@class WCSessionFile;
@class WCSessionFileTransfer;
@class NSError;
@protocol ConnectivityListsControllerDelegate;


/// The ``ConnectivityListsController`` class is responsible for tracking ``ListInfo`` objects that are found through lists controller's ``WCSession`` object. ``WCSession`` is responsible for informing watchOS applications of changes occurring in their counterpart application. It also allows the rest of the application to deal with ``ListInfo`` objects rather than the various types that ``WCSession`` may directly vend instances of. In essence, the work of a lists controller is to "front" the device's default WCSession.
SWIFT_CLASS("_TtC22Lister_Watch_Extension27ConnectivityListsController")
@interface ConnectivityListsController : NSObject <WCSessionDelegate>

/// The ``ConnectivityListsController`` object's delegate who is responsible for responding to ``ListsController`` changes.
@property (nonatomic, weak) id <ConnectivityListsControllerDelegate> __nullable delegate;

/// \returns  The number of tracked <code>ListInfo
/// </code> objects.
@property (nonatomic, readonly) NSInteger count;

/// Initializes an ``ConnectivityListsController`` instance and configures it to interact with the default ``WCSession``.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Initializes an ``ConnectivityListsController`` instance and configures it to interact with the default ``WCSession.`` The list name is used to focus the controller on changes to a single list.
///
/// \param listName A <code>NSString
/// </code> matching the name of the single list to be monitored.
- (nonnull instancetype)initWithListName:(NSString * __nonnull)listName OBJC_DESIGNATED_INITIALIZER;

/// Begin listening for changes to the tracked ``ListInfo`` objects. Be sure to balance each call to ``-startSearching`` with a call to ``-stopSearching``.
- (void)startSearching;

/// Stop listening for changes to the tracked ``ListInfo`` objects. Each call to ``-startSearching`` should be balanced with a call to this method.
- (void)stopSearching;
- (ListInfo * __nonnull)objectAtIndexedSubscript:(NSInteger)idx;
- (void)session:(WCSession * __nonnull)session didReceiveApplicationContext:(NSDictionary<NSString *, id> * __nonnull)applicationContext;
- (void)session:(WCSession * __nonnull)session didReceiveFile:(WCSessionFile * __nonnull)file;
- (void)session:(WCSession * __nonnull)session didFinishFileTransfer:(WCSessionFileTransfer * __nonnull)fileTransfer error:(NSError * __nullable)error;
@end



/// The ``ConnectivityListsControllerDelegate`` protocol enables an ``ConnectivityListsController`` object to notify other objects of changes to available ``ListInfo`` objects. This includes "will change content" events, "did change content" events, inserts, removes, updates, and errors. Note that the ``ListsController`` can call these methods on an aribitrary queue. If the implementation in these methods require UI manipulations, you should respond to the changes on the main queue.
SWIFT_PROTOCOL("_TtP22Lister_Watch_Extension35ConnectivityListsControllerDelegate_")
@protocol ConnectivityListsControllerDelegate
@optional

/// Notifies the receiver of this method that the lists controller will change it's contents in some form. This method is *always* called before any insert, remove, or update is received. In this method, you should prepare your UI for making any changes related to the changes that you will need to reflect once they are received. Once all of the updates are performed, your ``-listsControllerDidChangeContent:`` method will be called.
///
/// \param listsController The <code>ConnectivityListsController
/// </code> instance that will change its content.
- (void)listsControllerWillChangeContent:(ConnectivityListsController * __nonnull)listsController;

/// Notifies the receiver of this method that the lists controller is tracking a new ``ListInfo`` object. Receivers of this method should update their UI accordingly.
///
/// \param listsController The <code>ConnectivityListsController
/// </code> instance that inserted the new <code>ListInfo
/// </code>.
///
/// \param listInfo The new <code>ListInfo
/// </code> object that has been inserted at <code>index
/// </code>.
///
/// \param index The index that <code>listInfo
/// </code> was inserted at.
- (void)listsController:(ConnectivityListsController * __nonnull)listsController didInsertListInfo:(ListInfo * __nonnull)listInfo atIndex:(NSInteger)index;

/// Notifies the receiver of this method that the lists controller is no longer tracking ``listInfo``. Receivers of this method should update their UI accordingly.
///
/// \param listsController The <code>ConnectivityListsController
/// </code> instance that removed <code>listInfo
/// </code>.
///
/// \param listInfo The removed <code>ListInfo
/// </code> object.
///
/// \param index The index that <code>listInfo
/// </code> was removed at.
- (void)listsController:(ConnectivityListsController * __nonnull)listsController didRemoveListInfo:(ListInfo * __nonnull)listInfo atIndex:(NSInteger)index;

/// Notifies the receiver of this method that the lists controller received a message that ``listInfo`` has updated its content. Receivers of this method should update their UI accordingly.
///
/// \param listsController The <code>ConnectivityListsController
/// </code> instance that was notified that <code>listInfo
/// </code> has
/// been updated.
///
/// \param listInfo The <code>ListInfo
/// </code> object that has been updated.
///
/// \param index The index of <code>listInfo,
/// </code> the updated <code>ListInfo
/// </code>.
- (void)listsController:(ConnectivityListsController * __nonnull)listsController didUpdateListInfo:(ListInfo * __nonnull)listInfo atIndex:(NSInteger)index;

/// Notifies the receiver of this method that the lists controller did change it's contents in some form. This method is *always* called after any insert, remove, or update is received. In this method, you should finish off changes to your UI that were related to any insert, remove, or update.
///
/// \param listsController The <code>ConnectivityListsController
/// </code> instance that did change its content.
- (void)listsControllerDidChangeContent:(ConnectivityListsController * __nonnull)listsController;
@end

@class WKInterfaceController;

SWIFT_CLASS("_TtC22Lister_Watch_Extension17ExtensionDelegate")
@interface ExtensionDelegate : NSObject <WKExtensionDelegate>

/// The extension's main interface controller; who is responsible for assigning itself to this property. In order to enable appropriate messages to be relayed to it from the extension delegate.
@property (nonatomic) WKInterfaceController * __nullable mainInterfaceController;
- (void)handleUserActivity:(NSDictionary * __nonnull)userInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AllListItemsPresenter;
@class NSURL;
@class NSOperationQueue;
@class WKInterfaceImage;

SWIFT_CLASS("_TtC22Lister_Watch_Extension25GlanceInterfaceController")
@interface GlanceInterfaceController : WKInterfaceController <ConnectivityListsControllerDelegate, NSFilePresenter>
@property (nonatomic, weak) IBOutlet WKInterfaceImage * __null_unspecified glanceBadgeImage;
@property (nonatomic, weak) IBOutlet WKInterfaceGroup * __null_unspecified glanceBadgeGroup;
@property (nonatomic, weak) IBOutlet WKInterfaceLabel * __null_unspecified remainingItemsLabel;
@property (nonatomic, readonly) ConnectivityListsController * __nonnull listsController;
@property (nonatomic, readonly) AllListItemsPresenter * __nonnull listPresenter;
@property (nonatomic) BOOL isPresenting;
@property (nonatomic) NSURL * __nullable listURL;
@property (nonatomic, readonly) NSURL * __nullable presentedItemURL;
@property (nonatomic) NSOperationQueue * __nonnull presentedItemOperationQueue;
- (void)setupInterface;
- (void)initializeListsController;
- (void)listsController:(ConnectivityListsController * __nonnull)_ didInsertListInfo:(ListInfo * __nonnull)listInfo atIndex:(NSInteger)index;
- (void)willActivate;
- (void)didDeactivate;
- (void)addFilePresenterIfNeeded;
- (void)removeFilePresenterIfNeeded;
- (void)processListInfoAsTodayDocument:(ListInfo * __nonnull)listInfo;
- (void)readTodayDocument;
- (void)presentGlanceBadge;
- (void)relinquishPresentedItemToWriter:(void (^ __nonnull)(void (^ __nullable)(void)))writer;
- (void)presentedItemDidMoveToURL:(NSURL * __nonnull)newURL;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC22Lister_Watch_Extension8ListInfo")
@interface ListInfo : NSObject
@property (nonatomic, copy) NSString * __nonnull name;
- (BOOL)isEqual:(id __nullable)object;
@end

@class IncompleteListItemsPresenter;
@class WKInterfaceTable;


/// The interface controller that presents a list. The interface controller listens for changes to how the list should be presented by the list presenter.
SWIFT_CLASS("_TtC22Lister_Watch_Extension23ListInterfaceController")
@interface ListInterfaceController : WKInterfaceController <NSFilePresenter>
@property (nonatomic, weak) IBOutlet WKInterfaceTable * __null_unspecified interfaceTable;
@property (nonatomic, readonly) IncompleteListItemsPresenter * __nonnull listPresenter;
@property (nonatomic) ListInfo * __null_unspecified listInfo;
@property (nonatomic) BOOL isPresenting;
@property (nonatomic) BOOL hasUnsavedChanges;
@property (nonatomic) BOOL isEditingDisabled;
@property (nonatomic) NSURL * __nullable listURL;
@property (nonatomic, readonly) NSURL * __nullable presentedItemURL;
@property (nonatomic) NSOperationQueue * __nonnull presentedItemOperationQueue;
- (void)table:(WKInterfaceTable * __nonnull)table didSelectRowAtIndex:(NSInteger)rowIndex;
- (IBAction)markAllListItemsAsComplete:(id __nonnull)_;
- (IBAction)markAllListItemsAsIncomplete:(id __nonnull)_;
- (void)refreshAllData;
- (void)addFilePresenterIfNeeded;
- (void)removeFilePresenterIfNeeded;
- (void)setupInterfaceTable;
- (void)configureRowControllerAtIndex:(NSInteger)index;
- (void)saveUnsavedChangesWithCompletionHandler:(void (^ __nullable)(BOOL))complettionHandler;
- (void)awakeWithContext:(id __nullable)context;
- (void)didDeactivate;
- (void)relinquishPresentedItemToReader:(void (^ __nonnull)(void (^ __nullable)(void)))reader;
- (void)relinquishPresentedItemToWriter:(void (^ __nonnull)(void (^ __nullable)(void)))writer;
- (void)presentedItemDidChange;
- (void)savePresentedItemChangesWithCompletionHandler:(void (^ __nonnull)(NSError * __nullable))completionHandler;
- (void)presentedItemDidMoveToURL:(NSURL * __nonnull)newURL;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A row controller that represents a ``ListItem`` object. The ``ListItemRowController`` is used by the ``ListInterfaceController``.
SWIFT_CLASS("_TtC22Lister_Watch_Extension21ListItemRowController")
@interface ListItemRowController : NSObject
@property (nonatomic, weak) IBOutlet WKInterfaceLabel * __null_unspecified textLabel;
@property (nonatomic, weak) IBOutlet WKInterfaceImage * __null_unspecified checkBox;
- (void)setText:(NSString * __nonnull)text;
- (void)setTextColor:(UIColor * __nonnull)color;
- (void)setCheckBoxImageNamed:(NSString * __nonnull)imageName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC22Lister_Watch_Extension24ListsInterfaceController")
@interface ListsInterfaceController : WKInterfaceController <ConnectivityListsControllerDelegate>
@property (nonatomic, weak) IBOutlet WKInterfaceTable * __null_unspecified interfaceTable;
@property (nonatomic, readonly) ConnectivityListsController * __nonnull listsController;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)listsController:(ConnectivityListsController * __nonnull)listsController didInsertListInfo:(ListInfo * __nonnull)listInfo atIndex:(NSInteger)index;
- (void)listsController:(ConnectivityListsController * __nonnull)listsController didRemoveListInfo:(ListInfo * __nonnull)listInfo atIndex:(NSInteger)index;
- (void)listsController:(ConnectivityListsController * __nonnull)listsController didUpdateListInfo:(ListInfo * __nonnull)listInfo atIndex:(NSInteger)index;
- (id __nullable)contextForSegueWithIdentifier:(NSString * __nonnull)segueIdentifier inTable:(WKInterfaceTable * __nonnull)table rowIndex:(NSInteger)rowIndex;
- (void)configureRowControllerAtIndex:(NSInteger)index;
- (void)willActivate;
- (void)didDeactivate;
- (void)handleUserActivity:(NSDictionary * __nullable)userInfo;
@end



/// An empty row controller that is displayed when there are no list items in a list.
SWIFT_CLASS("_TtC22Lister_Watch_Extension20NoItemsRowController")
@interface NoItemsRowController : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
